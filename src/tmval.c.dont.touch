#include <stdio.h>
#include <math.h>

#ifndef __bool_true_false_are_defined
   #ifdef _Bool
      #define bool _Bool
   #else
      #define bool char
   #endif
   #define true  1
   #define false 0
   #define __bool_true_false_are_defined 1
#endif

#if __LP64__
   #define i16 short int
   #define i32 int
#else
#if defined( __GNUC__ ) || defined( __clang__ )
   #define i16 short int
   #define i32 int
#else
#if defined( __TURBOC__ ) || defined( __BORLANDC__ ) || defined( __WATCOMC__ )
   #define i16 int
   #define i32 long int
#else
   #error "Could not detect int size"
#endif
#endif
#endif

#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
   typedef union tmValue_T
   {
      struct  { char t[ 6 ]; i16 tag; };
/*      struct  { char t[ 6 ]; char tag; };*/
      bool    bval;
      i32     ival;
      double  nval;
      char    sval[ 6 ];
      void*   optr;
      char    raw[ 8 ];
   } tmvalue;
#else
   #error "Endianess could not be detected."
#endif



int main( int argc, char** argv )
{
   tmvalue t;
/*   t.raw[ 0 ] = t.raw[ 1 ] = 0xFF;*/
/*   t.tag = 0xFFF8;*/
   t.nval = NAN;

   printf( "Size: %i\n"
           "Tag: %x\n"
           "bool: %s\n"
           "int: %i\n"
           "dbl: %f\n"
           "str: \'%6s\'\n"
           "ptr: %p\n"
           "raw: \'%8s\'\n",
           sizeof( tmvalue ), ( t.tag & 0xFFFF ),
           ( t.bval ? "true" : "false" ), t.ival, t.nval, t.sval,
           t.optr, t.raw );

   printf( "---\n" );

   t.nval = 1.023456789 / 0.00000000000000000000000001;

   printf( "Size: %i\n"
           "Tag: %x\n"
           "bool: %s\n"
           "int: %i\n"
           "dbl: %f\n"
           "str: \'%6s\'\n"
           "ptr: %p\n"
           "raw: \'%8s\'\n",
           sizeof( tmvalue ), ( t.tag & 0xFFFF ),
           ( t.bval ? "true" : "false" ), t.ival, t.nval, t.sval,
           t.optr, t.raw );
   return( 0 );
}
